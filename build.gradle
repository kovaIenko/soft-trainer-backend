plugins {
  id 'java'
  id 'org.jetbrains.kotlin.jvm' version '1.9.22'
  id 'org.springframework.boot' version '3.2.3'
  id 'io.spring.dependency-management' version '1.1.4'

  id 'org.jetbrains.kotlin.plugin.lombok' version '1.9.22'
  id 'io.freefair.lombok' version '8.1.0'
}

group = 'com.backend'
version = '0.0.421'

java {
  sourceCompatibility = '17'
}

tasks.register("incrementVersion") {
  doFirst {
    def ver = project.version.toString()
    println "Current version: ${ver}"

    // Ensure the version string matches the expected format
    if (!ver.matches("\\d+\\.\\d+\\.\\d+")) {
      throw new GradleException("Version format is incorrect. It should be in the format 'x.y.z'.")
    }

    String[] versionParts = ver.split('\\.')
    if (versionParts.length == 3) {
      int lastNumber = Integer.parseInt(versionParts[2])
      int incremented = lastNumber + 1
      println "New last number: ${incremented}"

      String newVersion = "${versionParts[0]}.${versionParts[1]}.${incremented}"
      println "New version: ${newVersion}"

      // Read the build.gradle file
      def buildFile = project.buildFile
      def buildFileText = buildFile.getText('UTF-8')

      // Update the version in the build.gradle file
      def updatedBuildFileText = buildFileText.replaceFirst("version = '${ver}'", "version = '${newVersion}'")
      buildFile.write(updatedBuildFileText, 'UTF-8')

      println "Version updated in build.gradle to ${newVersion}"
    } else {
      throw new GradleException("Version format is incorrect. It should be in the format 'x.y.z'.")
    }
  }
}


// Make the 'build' task depend on 'incrementVersion' task
tasks.named('build') {
  dependsOn 'incrementVersion'
}
tasks.named('bootJar') {
  manifest {
    attributes(
      'Implementation-Version': "${version}"
    )
  }
  dependsOn 'incrementVersion'
}

jar {
	enabled = false
}

kotlinLombok {
  lombokConfigurationFile file("lombok.config")
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.22'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//  implementation 'org.springframework.boot:spring-boot-starter-websocket'
  runtimeOnly 'org.postgresql:postgresql'
  implementation 'org.flywaydb:flyway-core'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  implementation("io.github.stefanbratanov:jvm-openai:0.11.0")
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.3.0'
  testImplementation "io.mockk:mockk:1.13.10"
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  testImplementation "io.mockk:mockk:1.13.10"
  // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '3.2.4'
  // https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-resource-server
  implementation fileTree(dir: 'libs', include: '*.jar')
  implementation 'co.touchlab:kermit:2.0.0-RC4'


  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: '6.2.4'
  implementation group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.5.2.RELEASE'
  testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
  useJUnitPlatform()
}


